<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop.xsd
         http://www.springframework.org/schema/tx
      	 http://www.springframework.org/schema/tx/spring-tx.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context.xsd">
	<!-- make spring look up annotation -->
	<context:annotation-config />

	<!-- 1：配置数据库相关参数 -->
	<context:property-placeholder location="classpath:jdbc.properties" />

	<!-- 2：数据库连接池Druid -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 配置连接池属性 -->
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />
	</bean>

	<!-- 配置Hibernate相关属性 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 配置Hibernate属性 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialet">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
			</props>
		</property>

		<!-- mappingResouces属性用来列出全部映射文件 -->
		<property name="mappingResources">
			<list>
				<!-- 以下用来列出Hibernate映射文件 -->
				<value>org/lzx/hros/domain/Application.hbm.xml</value>
				<value>org/lzx/hros/domain/Attend.hbm.xml</value>
				<value>org/lzx/hros/domain/AttendType.hbm.xml</value>
				<value>org/lzx/hros/domain/CheckBack.hbm.xml</value>
				<value>org/lzx/hros/domain/Employee.hbm.xml</value>
				<value>org/lzx/hros/domain/Payment.hbm.xml</value>
			</list>
		</property>

	</bean>


	<!-- 配置控制层Action的类 -->

	<!-- 配置Service层的类 -->
	<!-- 为之注入DAO组件 -->
	<bean id="managerTemplate" abstract="true" lazy-init="true"
		p:appDao-ref="appDao" p:attendDao-ref="attendDao" p:typeDao-ref="attendTypeDao"
		p:checkDao-ref="checkDao" p:empDao-ref="employeeDao" p:mgrDao-ref="managerDao"
		p:payDao-ref="payDao" />
	<!-- 定义两个业务逻辑组件，继承业务逻辑组件的模板 -->
	<bean id="empManager" class="org.lzx.hros.service.impl.EmpManagerImpl"
		parent="managerTemplate" />
	<bean id="mgrManager" class="org.lzx.hros.service.impl.MgrManagerImpl"
		parent="managerTemplate" />



	<!-- 配置DAO层的类 （写实现类，不是写接口） -->
	<!-- 配置DAO组件的模板 -->
	<bean id="daoTemplate" abstract="true" lazy-init="true"
		p:sessionFactory-ref="sessionFactory" />

	<bean id="employeeDao" class="org.lzx.hros.dao.impl.EmployeeDaoImpl"
		parent="daoTemplate" />

	<bean id="managerDao" class="org.lzx.hros.dao.impl.ManagerDaoImpl"
		parent="daoTemplate" />

	<bean id="attendDao" class="org.lzx.hros.dao.impl.AttendDaoImpl"
		parent="daoTemplate" />

	<bean id="attendTypeDao" class="org.lzx.hros.dao.impl.AttendTypeDaoImpl"
		parent="daoTemplate" />

	<bean id="appDao" class="org.lzx.hros.dao.impl.ApplicationDaoImpl"
		parent="daoTemplate" />

	<bean id="checkDao" class="org.lzx.hros.dao.impl.CheckBackDaoImpl"
		parent="daoTemplate" />

	<bean id="payDao" class="org.lzx.hros.dao.impl.PaymentDaoImpl"
		parent="daoTemplate" />

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<!-- 开启注解事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- Quartz配置 -->
	<!-- 定义触发器来管理任务Bean,触发器bean中嵌套了JobBean -->
	<bean id="cronTriggerPay"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail">
			<!-- 使用嵌套Bean的方式来定义任务Bean -->
			<bean class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
				<!-- 指定任务Bean的实现类 -->
				<property name="jobClass" value="org.lzx.hros.schedule.PayJob" />
				<!-- 为任务Bean注入该类的组合属性 -->
				<property name="jobDataAsMap">
					<map>
						<entry key="empMgr" value-ref="empManager" />
					</map>
				</property>
			</bean>
		</property>
		<!-- 指定Cron表达式：每月3日2时启动工资结算 -->
		<property name="cronExpression" value="0 0 2 3 * ? *" />
	</bean>
	
	
	<!-- 定义打卡工作类bean -->
	<bean id="PunchJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
			<!-- 指定任务Bean的实现类 -->
			<property name="jobClass" value="org.lzx.hros.schedule.PunchJob" />
			<!-- 为任务Bean注入该类的组合属性 -->
			<property name="jobDataAsMap">
				<map>
					<entry key="empMgr" value-ref="empManager" />
				</map>
			</property>
	</bean>

	<bean id="cronTriggerPunch"	class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="PunchJob"/>
		<!-- 指定Cron表达式：周一到周五8点、12点执行调度，自动插入旷工记录 -->
		<property name="cronExpression" value="0 0 8,12 ? * MON-FRI" />
	</bean>
	
	<!-- 执行实际任务的调度工厂 -->
	<bean id="SpringJobSchedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="cronTriggerPay" />
				<ref bean="cronTriggerPunch" />
			</list>
		</property>
	</bean>

</beans>